const { gql } = require('apollo-server');

// graphQL schema
// A schema is a collection of type definitions (hence "typeDefs")
// that together define the "shape" of queries that are executed against
// your data
const typeDefs = gql`
    # Comments in GraphQL strings (such as this one) start with hash (#) symbol.

    scalar Date

    type Author {
        """
        id is autogenerated field
        """
        id: ID!

        "first name of author"
        firstName: String

        "last name of author"
        lastName: String

        "epoch date to represent dob of author"
        dob: Date

        "age is auto populated from dob"
        age: Int
    }

    # This "Book" type defines the queryable fields for every book in our data source.
    type Book {
        id: ID!
        title: String!
        author: Author!
        price: Float
        isPublished: Boolean
    }

    union SearchResult = Book | Author

    # The "Query" type is special: it lists all of the available queries that
    # clients can execute, along with the return type for each. In this
    # case, the "books" query returns an array of zero or more Books (defined above).
    type Query {
        greeting: String
        books: [Book]
        authors: [Author],
        search(contains: String): [SearchResult!]
    }

    # input types for mutations
    "Input content for adding new Author"
    input NewAuthor {
        firstName: String
        lastName: String
        DOB: Date
    }

    "Input content for adding new Book"
    input NewBook {
        title: String
        author: NewAuthor
    }    

    # entrypoint for mutation
    type Mutation {
        addBook(book: NewBook): addBookMutationResponse
    }

    # interfaces
    interface MutationResponse {
        code: String!
        success: Boolean!
        message: String!
    }

    # mutation response
    type addBookMutationResponse implements MutationResponse {
        code: String!
        success: Boolean!
        message: String!
        book: Book!
    }
`;

module.exports = {
    typeDefs
}
